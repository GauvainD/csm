/*
 * Author: shadi lahham
 *
 * generates permutations in the range 1 .. size
 * the permutations are generated by a group of permuters that
 * are "chained in a series" such that the effect is cumulative.
 *
 */

#ifndef GROUP_PERMUTER_H
#define GROUP_PERMUTER_H

#include "permuter.h"

#define TRUE 1
#define FALSE 0

typedef struct groupPermuter {
	int _numberOfGroups;
	int* _sizesOfGroups;
    int _size;
    int* _index;
    permuter** _permuters;
	int _firstPermutation;  // boolean flag - the first permuation is unique, not permuted
} groupPermuter;

groupPermuter* createGroupPermuter(int numberOfGroups, int* sizesOfGroups, int totalSize, int permutationGroupSize);

int nextGroupPermutation(groupPermuter *gp);

void resetGroupPermuter(groupPermuter *gp);

void freeGroupPermuter(groupPermuter *gp);

#endif
