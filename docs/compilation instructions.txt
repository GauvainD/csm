Setting up the CSM Development Environment

Background
The CSM system is written mostly in C++, with some modules in C. It also depends on several 3rd party libraries. This document will provide directions on obtaining the CSM sources and dependent libraries, and compiling everything. Several external tools will be used.

CSM can be compiled on Windows, Linux and OS X. The instructions are a little bit different on these platforms, although both Linux and OS X are rather similar.

Compiler
CSM requires C++11. The following compilers are supported:

On Windows, Visual Studio 2013 or later. CSM is a 32-bit Windows process.
Apple LLVM 5.1 or later (clang-503 or later)
On Linux – gcc and g++ 4.8 or later.

Linux Prequisites
You need to install git, cmake,  g++  and boost on Linux. The easiest way to do that is to run:

sudo apt-get install git cmake g++ libboost-all-dev

Of course, on CentUS use yum instead. The packages have different names, too, so run

sudo yum install git cmake gcc-c++


Obtaining the CSM sources
The CSM git repository is hosted on bitbucket.org . To get the sources, simply run

git clone https://bitbucket.org/teamcsm/csm.git csmroot

This will create a csmroot folder with several subfolders:
CSM – the CSM sources
openbabel-files – OpenBabel headers, binaries and scripts
Testing – the Python test suite
test_cases – Test cases for the test suite

Boost
CSM uses various Boost components. It's been tested with Boost 1.54 up to Boost 1.57. It should work with newer versions as well.

You can install Boost as follows:

On Windows, download the prebuilt binaries from http://sourceforge.net/projects/boost/files/boost-binaries/ . Don't forget to download the 32-bit version, CSM hasn't been tested as a 64-bit Windows program yet.

Install Boost wherever you like (the default is c:\boost\<version>), just remember where it is. 

On Ubuntu, just run sudo apt-get install libboost-all-dev
On OS X the easiest way is to use homebrew like so:
brew install boost
On CentOS, at least at this time, boost 1.53 is available in the official repository. Unfortunately CSM requires boost 1.54 and later, so you need to install Boost manually, by running the following commands from a directory of your choice:

cd csmroot
./getboost
sudo ./installboost

Note that these commands install boost 1.57 in /usr/local. Also, compiling boost can take a while.

OpenBabel
CSM uses OpenBabel, an open-source chemistry library. As of the writing of this document (September 2014), the latest OpenBabel release is 2.3.2, which doesn't support C++11. The bleeding edge version does support it, so you need to obtain that.

On Windows, a compiled version of OpenBabel is already stored in the repository, so there's no need to do anything.

On OS X and Linux things are a little more involved, but not by much.

1. Switch to csmroot/openbabel-files/unix and run the build script.
The script will get the latest OpenBabel version from the OpenBabel git repository, compile it and install it under csmroot/openbabel-files/unix/lib
2. The script modifies the LD_LIBRARY_PATH variable. After running it, please run the following command to get the changes: source ~/.bashrc

Compiling CSM
Now it's time to compile CSM.

CSM uses cmake. On Linux and OS X it's quite simple, switch to csmroot/CSM/bin folder (create it if it's not there). Then run cmake .. 

This will generate a makefile on OS X and Linux, build it by running make 

On Windows you need to tell cmake where Boost is installed. Use
cmake -DBOOST_ROOT=<your boost dir> -DBOOST_LIBRARYDIR=<boost library path> ..

The 'boost library path' is the folder inside the Boost root directory, with a name like lib32-msvc-12.0.

This will generate a Visual Studio solution you can use to compile or modify CSM.

Running the Python Test
To run the Python tests, you need to have Python 3.4 installed (older versions of Python 3 might work, too. Python 2 is not supported). So first install it.

Now make another symbolic link – from csmroot/bin to the folder with the compiled CSM binaries.

To run the tests, switch to csmroot/Testing and run

python -m unittest test.py

Note that you need to run Python 3, so you might have to specify a path or run python3 – depending on your setup.
