name: Create CSM Wheels
on:
  push:
    tags:
      - v*

jobs:
  manylinux-wheels:
    runs-on: ubuntu-latest
    name: Create the manylinux wheels for all supported Python versions
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build docker image
        working-directory: src
        run: docker build -f Dockerfile.manylinux . -t csm-manylinux:latest --build-arg GITHUB_VERSION=${{ github.ref }}
      - name: Copy wheels
        working-directory: src
        run: |
          docker run --rm --name csm-manylinux -v `pwd`:/external csm-manylinux:latest
      - name: Upload to Release
        id: upload-release-asset
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: src/csm-wheels/csm*.whl
          file_glob: true
          tag: ${{ github.ref }}
          overwrite: true
          body: "Linux Wheels"

  windows-wheels:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [ '3.7', '3.8', '3.9', '3.10' ]
    name: Create the Windows Wheel for Python ${{ matrix.python-version }}
    env:
      GITHUB_VERSION: ${{ github.ref }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: x64
      - name: Set Python environment
        working-directory: src
        run: |
          python ./install_requirements.py
          pip install wheel
      - name: Create the wheel
        working-directory: src
        run: |
          python setup.py prepare
          pip wheel .
      - name: Upload to Release
        id: upload-release-asset
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: src/csm*.whl
          file_glob: true
          tag: ${{ github.ref }}
          overwrite: true
          body: "Windows Wheels"
  
  source-package:
    runs-on: windows-latest
    name: Create the Windows Wheel for Python ${{ matrix.python-version }}
    env:
      GITHUB_VERSION: ${{ github.ref }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          architecture: x64
      - name: Set Python environment
        working-directory: src
        run: |
          python ./install_requirements.py
          pip install wheel
      - name: Create the wheel
        working-directory: src
        run: |
          python setup.py prepare
          python setup.py sdist
      - name: Upload to Release
        id: upload-release-asset
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: src/dist/csm*.tar.gz
          file_glob: true
          tag: ${{ github.ref }}
          overwrite: true
          body: "Source Package"
      
  build-docker-image:
    # needs: manylinux-wheels
    runs-on: ubuntu-latest
    name: Create the docker image using wheels
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Set env
        #run: echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
        run: echo "RELEASE_VERSION=v1.3.0b21" >> $GITHUB_ENV
      - name: get wheels
        uses: dsaltares/fetch-gh-release-asset@master
        with:
          # repo: 'dsaltares/godot-wild-jam-18'
          # version: 'tags/v0.1.18'
          # file: 'plague-linux.zip'
          # token: ${{ secrets.GITHUB_TOKEN }}


          repo: 'continuous-symmetry-measure/csm'
          version: tags/v1.3.0b21
          file: 'csm-1.3.0b21-cp39-cp39-manylinux_2_24_x86_64.whl'
          token: ${{ secrets.GITHUB_TOKEN }}
      - name: Build docker image
        working-directory: src
        run: docker build . --tag $RELEASE_VERSION --build-arg WHL=csm-1.3.0b21-cp39-cp39-manylinux_2_24_x86_64.whl --build-arg CSM_VER=$RELEASE_VERSION